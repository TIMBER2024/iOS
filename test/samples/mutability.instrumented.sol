/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.6.10;

contract Base {
    function getX() virtual public returns (uint) {
        return 1;
    }
}

/// #invariant {:msg ""} x > 0;
contract Baz {
    struct vars3 {
        bool __scribble_check_invs_at_end;
    }

    struct vars4 {
        bool __scribble_check_invs_at_end;
    }

    uint internal x = 1;

    function getX() public returns (uint RET_0) {
        vars3 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__78.isInContract();
        __ScribbleUtilsLib__78.setInContract(true);
        RET_0 = _original_Baz_getX();
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__78.AssertionFailed("000736:0066:000 2: ");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__78.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_Baz_getX() internal view returns (uint) {
        return x;
    }

    function getXPlus1() public returns (uint) {
        return getX() + 1;
    }

    function getXPlus2() public returns (uint RET_0) {
        vars4 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__78.isInContract();
        __ScribbleUtilsLib__78.setInContract(true);
        RET_0 = _original_Baz_getXPlus2();
        if (!(x > 2)) {
            emit __ScribbleUtilsLib__78.AssertionFailed("001476:0066:000 3: ");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__78.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_Baz_getXPlus2() internal returns (uint) {
        return getXPlus1() + 1;
    }

    /// Check only the current contract's state invariants
    function __scribble_Baz_check_state_invariants_internal() internal {
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__78.AssertionFailed("002022:0066:000 1: ");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_Baz_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__78.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__78.setInContract(false);
    }
}

library __ScribbleUtilsLib__78 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

contract Foo is Base {
    uint internal x = 1;

    function getX() virtual override public returns (uint RET_0) {
        RET_0 = _original_Foo_getX();
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__78.AssertionFailed("003458:0066:000 0: ");
            assert(false);
        }
    }

    function _original_Foo_getX() internal view returns (uint) {
        return x;
    }
}

contract Child is Foo {
    function getX() virtual override public returns (uint RET_0) {
        RET_0 = _original_Child_getX();
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__78.AssertionFailed("003829:0066:000 0: ");
            assert(false);
        }
    }

    function _original_Child_getX() internal returns (uint) {
        return x + 1;
    }
}
