/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.10;

/// #require z > 1;
///  #try msg.sender == address(0x0); 
contract Foo {
    struct vars0 {
        uint256 __mstore_scratch__;
    }

    struct vars1 {
        uint256 __mstore_scratch__;
    }

    struct vars2 {
        uint256 __mstore_scratch__;
    }

    struct vars3 {
        uint256 __mstore_scratch__;
    }

    struct vars4 {
        uint256 __mstore_scratch__;
    }

    uint internal z;

    function bar(uint x) public {
        vars0 memory _v;
        unchecked {
            require(x > 2);
            if (x < 10) _v.__mstore_scratch__ = 42;
            require(z > 1);
            if (msg.sender == address(0x00)) _v.__mstore_scratch__ = 42;
        }
        _original_Foo_bar(x);
    }

    function _original_Foo_bar(uint x) internal {
        vars3 memory _v;
        unchecked {
            require(x > 10);
            if (x == 9) _v.__mstore_scratch__ = 42;
        }
        uint z = x + 1;
    }

    function boo() public {
        vars1 memory _v;
        unchecked {
            require(z > 1);
            if (msg.sender == address(0x00)) _v.__mstore_scratch__ = 42;
        }
        _original_Foo_boo();
    }

    function _original_Foo_boo() internal {}

    function baz() internal {}

    function test(uint x, uint y) public returns (uint RET_0) {
        vars2 memory _v;
        unchecked {
            if (x == 1) _v.__mstore_scratch__ = 42;
            if (y == 2) _v.__mstore_scratch__ = 42;
            require(z > 1);
            if (msg.sender == address(0x00)) _v.__mstore_scratch__ = 42;
        }
        RET_0 = _original_Foo_test(x, y);
    }

    function _original_Foo_test(uint x, uint y) internal returns (uint) {
        vars4 memory _v;
        uint a = 1;
        uint b = 2;
        unchecked {
            if (a == 1) _v.__mstore_scratch__ = 42;
            if (b == 2) _v.__mstore_scratch__ = 42;
        }
        return (((x + y) + z) + a) + b;
    }
}
