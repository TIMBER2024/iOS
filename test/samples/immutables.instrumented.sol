/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.20;

/// #if_succeeds x == 5;
contract Example01 {
    uint private immutable x;

    constructor() {
        x = 5;
        unchecked {
            if (!(x == 5)) {
                emit __ScribbleUtilsLib__56.AssertionFailed("000324:0066:000 0: ");
                assert(false);
            }
        }
    }
}

contract Example02 {
    uint private immutable x;

    /// #if_succeeds x == 5;
    constructor() {
        x = 5;
        unchecked {
            if (!(x == 5)) {
                emit __ScribbleUtilsLib__56.AssertionFailed("000637:0066:000 1: ");
                assert(false);
            }
        }
    }
}

/// #require y == 1;
contract Example03 {
    uint private immutable x;
    uint internal y = 1;

    constructor() {
        unchecked {
            require(y == 1);
        }
        x = 5;
    }
}

contract Example04 {
    uint private immutable x;
    uint internal y = 1;

    /// #require y == 1;
    constructor() {
        unchecked {
            require(y == 1);
        }
        x = 5;
    }
}

library __ScribbleUtilsLib__56 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
