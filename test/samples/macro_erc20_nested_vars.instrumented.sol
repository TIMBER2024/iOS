/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.13;

/// #macro myerc20(_balances, _totalSupply);
contract VulnerableToken {
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    uint256 private _totalSupply;
    address_to_uint256_222.S private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor() {
        __ScribbleUtilsLib__222.setInContract(true);
        _totalSupply = 1000000;
        address_to_uint256_222.set(_balances, msg.sender, 1000000);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__222.setInContract(false);
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address _owner) external view returns (uint256) {
        return address_to_uint256_222.get(_balances, _owner);
    }

    function allowance(address _owner, address _spender) external view returns (uint256) {
        return _allowances[_owner][_spender];
    }

    function transfer(address _to, uint256 _value) external returns (bool RET_0) {
        __ScribbleUtilsLib__222.setInContract(true);
        RET_0 = _original_VulnerableToken_transfer(_to, _value);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__222.setInContract(false);
    }

    function _original_VulnerableToken_transfer(address _to, uint256 _value) internal returns (bool) {
        address from = msg.sender;
        require(_value <= address_to_uint256_222.get(_balances, from));
        address_to_uint256_222.set(_balances, from, address_to_uint256_222.get(_balances, from) - _value);
        address_to_uint256_222.set(_balances, _to, address_to_uint256_222.get(_balances, _to) + _value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) external returns (bool RET_0) {
        __ScribbleUtilsLib__222.setInContract(true);
        RET_0 = _original_VulnerableToken_approve(_spender, _value);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__222.setInContract(false);
    }

    function _original_VulnerableToken_approve(address _spender, uint256 _value) internal returns (bool) {
        address owner = msg.sender;
        _allowances[owner][_spender] = _value;
        emit Approval(owner, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool RET_0) {
        __ScribbleUtilsLib__222.setInContract(true);
        RET_0 = _original_VulnerableToken_transferFrom(_from, _to, _value);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__222.setInContract(false);
    }

    function _original_VulnerableToken_transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {
        uint256 allowed = _allowances[_from][msg.sender];
        require(_value <= allowed);
        require(_value <= address_to_uint256_222.get(_balances, _from));
        address_to_uint256_222.set(_balances, _from, address_to_uint256_222.get(_balances, _from) - _value);
        address_to_uint256_222.set(_balances, _to, address_to_uint256_222.get(_balances, _to) + _value);
        _allowances[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    /// Check only the current contract's state invariants
    function __scribble_VulnerableToken_check_state_invariants_internal() internal {
        unchecked {
            if (!(_balances.sum == _totalSupply)) {
                emit __ScribbleUtilsLib__222.AssertionFailed("003784:0098:000 1: Sum of balances is total supply");
                assert(false);
            }
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_VulnerableToken_check_state_invariants_internal();
    }
}

library address_to_uint256_222 {
    struct S {
        mapping(address => uint256) innerM;
        address[] keys;
        mapping(address => uint256) keyIdxM;
        uint256 sum;
    }

    function addKey(S storage m, address key) private {
        uint idx = m.keyIdxM[key];
        if (idx == 0) {
            if (m.keys.length == 0) {
                m.keys.push();
            }
            m.keyIdxM[key] = m.keys.length;
            m.keys.push(key);
        }
    }

    function removeKey(S storage m, address key) private {
        uint256 idx = m.keyIdxM[key];
        if (idx == 0) return;
        if (idx != (m.keys.length - 1)) {
            address lastKey = m.keys[m.keys.length - 1];
            m.keys[idx] = lastKey;
            m.keyIdxM[lastKey] = idx;
        }
        m.keys.pop();
        delete m.keyIdxM[key];
    }

    function set(S storage m, address key, uint256 val) internal returns (uint256) {
        unchecked {
            m.sum -= m.innerM[key];
            m.sum += val;
        }
        m.innerM[key] = val;
        addKey(m, key);
        return m.innerM[key];
    }

    function get(S storage m, address key) internal view returns (uint256) {
        return m.innerM[key];
    }
}

library __ScribbleUtilsLib__222 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
