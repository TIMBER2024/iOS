/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.4.26;

contract Foo {
    struct vars0 {
        uint256 i0;
        address a0;
        bool forall_0;
    }

    address_to_uint256_11.S private _valueMap;

    function foo() public {
        vars0 memory _v;
        _original_Foo_foo();
        _v.forall_0 = true;
        for (_v.i0 = 1; _v.i0 < _valueMap.keys.length; _v.i0++) {
            _v.a0 = _valueMap.keys[_v.i0];
            _v.forall_0 = address_to_uint256_11.get(_valueMap, _v.a0) > 0;
            if (!_v.forall_0) break;
        }
        if (!(_v.forall_0)) {
            __ScribbleUtilsLib__11.assertionFailed("000682:0061:000 0: ");
            assert(false);
        }
    }

    function _original_Foo_foo() internal {}
}

library address_to_uint256_11 {
    struct S {
        mapping(address => uint256) innerM;
        address[] keys;
        mapping(address => uint256) keyIdxM;
        uint256 sum;
    }

    function addKey(S storage m, address key) private {
        uint idx = m.keyIdxM[key];
        if (idx == 0) {
            if (m.keys.length == 0) {
                m.keys.length++;
            }
            m.keyIdxM[key] = m.keys.length;
            m.keys.push(key);
        }
    }

    function removeKey(S storage m, address key) private {
        uint256 idx = m.keyIdxM[key];
        if (idx == 0) return;
        if (idx != (m.keys.length - 1)) {
            address lastKey = m.keys[m.keys.length - 1];
            m.keys[idx] = lastKey;
            m.keyIdxM[lastKey] = idx;
        }
        delete m.keys[m.keys.length - 1];
        m.keys.length--;
        delete m.keyIdxM[key];
    }

    function get(S storage m, address key) internal view returns (uint256) {
        return m.innerM[key];
    }
}

library __ScribbleUtilsLib__11 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
