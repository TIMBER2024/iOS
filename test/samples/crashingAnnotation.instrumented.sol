/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.7.5;

contract Foo {
    struct vars0 {
        uint256 p;
        uint256 t;
        bool let_0;
        bool let_1;
    }

    function div(uint a, uint b) public returns (uint c) {
        vars0 memory _v;
        c = _original_Foo_div(a, b);
        _v.p = b;
        _v.t = a / _v.p;
        _v.let_0 = _v.t == c;
        _v.let_1 = _v.let_0;
        if (!(_v.let_1)) {
            emit __ScribbleUtilsLib__18.AssertionFailed("000527:0066:000 0: ");
            assert(false);
        }
    }

    function _original_Foo_div(uint a, uint b) internal pure returns (uint c) {
        return a / b;
    }
}

library __ScribbleUtilsLib__18 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
