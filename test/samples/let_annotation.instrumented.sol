/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.11;

contract LetAnnotation {
    struct vars0 {
        bytes1 y;
        bool let_0;
    }

    struct vars2 {
        uint256 oldVal;
    }

    struct vars3 {
        uint256 oldVal1;
    }

    struct vars4 {
        uint256 oldVal2;
    }

    function foo(uint amount) public {
        vars2 memory _v;
        uint[] memory a;
        for (uint i = 0; i < a.length; i++) {
            unchecked {
                _v.oldVal = a[i];
            }
            a[i] += amount;
            unchecked {
                if (!(_v.oldVal > 0)) {
                    emit __ScribbleUtilsLib__127.AssertionFailed("000707:0067:000 3: ");
                    assert(false);
                }
            }
            0;
        }
    }

    function foo1(uint amount) public {
        vars3 memory _v;
        uint[] memory a;
        for (uint i = 0; i < a.length; i++) {
            unchecked {
                _v.oldVal1 = a[i];
                if (!(_v.oldVal1 > 0)) {
                    emit __ScribbleUtilsLib__127.AssertionFailed("001131:0067:000 5: ");
                    assert(false);
                }
            }
            a[i] += amount;
            0;
        }
    }

    function foo2(uint amount) public {
        vars4 memory _v;
        uint[] memory a;
        unchecked {
            _v.oldVal2 = a[0];
        }
        for (uint i = 0; i < a.length; i++) {
            unchecked {
                if (!(_v.oldVal2 > 0)) {
                    emit __ScribbleUtilsLib__127.AssertionFailed("001609:0067:000 7: ");
                    assert(false);
                }
            }
            a[i] += amount;
        }
    }

    function foo3() public {
        vars0 memory _v;
        _original_LetAnnotation_foo3();
        unchecked {
            _v.y = bytes1(0x0f);
            _v.let_0 = _v.y > 0x01;
            if (!(_v.let_0)) {
                emit __ScribbleUtilsLib__127.AssertionFailed("002020:0067:000 0: ");
                assert(false);
            }
        }
    }

    function _original_LetAnnotation_foo3() internal {}
}

contract Foo {
    struct vars1 {
        uint256 dummy_;
        uint256 x;
        bool let_1;
    }

    function snd(uint v) internal pure returns (uint, uint) {
        return (1, v);
    }

    function foo(uint v) public {
        vars1 memory _v;
        _original_Foo_foo(v);
        unchecked {
            (_v.dummy_, _v.x) = snd(v);
            _v.let_1 = _v.x == 2;
            if (!(_v.let_1)) {
                emit __ScribbleUtilsLib__127.AssertionFailed("002636:0069:000 1: P0");
                assert(false);
            }
        }
    }

    function _original_Foo_foo(uint v) internal {}
}

library __ScribbleUtilsLib__127 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
