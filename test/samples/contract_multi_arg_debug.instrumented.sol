/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.7;

/// #invariant {:msg ""} b == a + c - 1; 
contract Foo {
    uint internal a = 2;
    uint internal b = 101;
    uint internal c = 100;

    function inc5(uint x) external view returns (uint y) {
        return x + 5;
    }

    /// Check only the current contract's state invariants
    function __scribble_Foo_check_state_invariants_internal() internal {
        unchecked {
            if (!(b == ((a + c) - 1))) {
                emit __ScribbleUtilsLib__46.AssertionFailedData(0, abi.encode(b, a, c));
                emit __ScribbleUtilsLib__46.AssertionFailed("000669:0066:000 0: ");
            }
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_Foo_check_state_invariants_internal();
    }

    constructor() {
        __ScribbleUtilsLib__46.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__46.setInContract(false);
    }
}

library __ScribbleUtilsLib__46 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

contract Base is Foo {
    function inc3(uint x) external returns (uint y) {
        __ScribbleUtilsLib__46.setInContract(true);
        y = _original_Base_inc3(x);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__46.setInContract(false);
    }

    function _original_Base_inc3(uint x) internal returns (uint y) {
        a += x + 1;
        return x + 1;
    }

    /// Check only the current contract's state invariants
    function __scribble_Base_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Base_check_state_invariants_internal();
        __scribble_Foo_check_state_invariants_internal();
    }

    constructor() {
        __ScribbleUtilsLib__46.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__46.setInContract(false);
    }
}
