/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.8;

enum A {
    A,
    B,
    C
}

type Price is uint32;

interface IFace {
    function foo() external;
}

contract Boo {
    function foo() external {}
}

contract UserDefinedValueTypes {
    type Quantity is uint32;

    function main(uint32 a, int64 b, A c) public {
        _original_UserDefinedValueTypes_main(a, b, c);
        unchecked {
            if (!((a >= type(uint32).min) && (a <= type(uint32).max))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("000578:0066:000 0: ");
                assert(false);
            }
            if (!((b >= type(int64).min) && (b <= type(int64).max))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("000778:0066:000 1: ");
                assert(false);
            }
            if (!((c != type(A).min) && (c != type(A).max))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("000970:0066:000 2: ");
                assert(false);
            }
            if (!(keccak256(bytes(type(IFace).name)) == keccak256(bytes("IFace")))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("001185:0066:000 3: ");
                assert(false);
            }
            if (!(keccak256(type(Boo).creationCode) == bytes32(0x00))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("001387:0066:000 4: ");
                assert(false);
            }
            if (!(keccak256(type(Boo).runtimeCode) == bytes32(0x00))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("001588:0066:000 5: ");
                assert(false);
            }
            if (!(type(IFace).interfaceId != bytes4(0x00))) {
                emit __ScribbleUtilsLib__61.AssertionFailed("001779:0066:000 6: ");
                assert(false);
            }
        }
    }

    function _original_UserDefinedValueTypes_main(uint32 a, int64 b, A c) internal {}
}

contract Foo {
    function foo(uint v) public {
        _original_Foo_foo(v);
        unchecked {
            if (!(abi.encode(v).length > 0)) {
                emit __ScribbleUtilsLib__61.AssertionFailed("002160:0066:000 7: ");
                assert(false);
            }
        }
    }

    function _original_Foo_foo(uint v) internal {}

    function foo1(uint v) public {
        _original_Foo_foo1(v);
        unchecked {
            if (!(abi.encodePacked(v).length > 0)) {
                emit __ScribbleUtilsLib__61.AssertionFailed("002497:0066:000 8: ");
                assert(false);
            }
        }
    }

    function _original_Foo_foo1(uint v) internal {}

    function foo2(uint v) public {
        _original_Foo_foo2(v);
        unchecked {
            if (!(abi.encodeWithSelector(bytes4(hex"01020304"), v).length > 0)) {
                emit __ScribbleUtilsLib__61.AssertionFailed("002864:0066:000 9: ");
                assert(false);
            }
        }
    }

    function _original_Foo_foo2(uint v) internal {}

    function foo3(uint v) public {
        _original_Foo_foo3(v);
        unchecked {
            if (!(abi.encodeWithSignature("dummy", v).length > 0)) {
                emit __ScribbleUtilsLib__61.AssertionFailed("003218:0067:000 10: ");
                assert(false);
            }
        }
    }

    function _original_Foo_foo3(uint v) internal {}
}

library __ScribbleUtilsLib__61 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
