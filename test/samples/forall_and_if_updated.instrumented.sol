/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.10;

contract Foo {
    type CustomValueType is uint32;

    struct vars0 {
        uint256 i0;
        uint256 k0;
        bool forall_0;
    }

    struct vars1 {
        uint256 i1;
        CustomValueType t0;
        bool forall_1;
    }

    uint256_to_mapping_uint256_to_uint256_45.S internal m;
    Foo_CustomValueType_3_to_uint256_45.S internal _map;

    function main() public {
        Foo_m_idx_uint256_idx_uint256_uint256_assign(0, 1, 1);
    }

    function some(CustomValueType t, uint v) external {
        Foo__map_ud_Foo_CustomValueType_uint256_set(t, v);
    }

    function Foo_m_idx_uint256_idx_uint256_uint256_assign(uint256 ARG0, uint256 ARG1, uint256 ARG2) internal returns (uint256 RET0) {
        vars0 memory _v;
        uint256_to_mapping_uint256_to_uint256_45.get_lhs(m, ARG0)[ARG1] = ARG2;
        RET0 = uint256_to_mapping_uint256_to_uint256_45.get_lhs(m, ARG0)[ARG1];
        unchecked {
            _v.forall_0 = true;
            for (_v.i0 = 1; _v.i0 < m.keys.length; _v.i0++) {
                _v.k0 = m.keys[_v.i0];
                _v.forall_0 = uint256_to_mapping_uint256_to_uint256_45.get(m, _v.k0)[0] > 1;
                if (!_v.forall_0) break;
            }
            if (!(_v.forall_0)) {
                emit __ScribbleUtilsLib__45.AssertionFailed("001393:0066:000 0: ");
                assert(false);
            }
        }
    }

    function Foo__map_ud_Foo_CustomValueType_uint256_set(Foo.CustomValueType ARG3, uint256 ARG4) internal {
        vars1 memory _v;
        Foo_CustomValueType_3_to_uint256_45.set(_map, ARG3, ARG4);
        unchecked {
            _v.forall_1 = true;
            for (_v.i1 = 1; _v.i1 < _map.keys.length; _v.i1++) {
                _v.t0 = _map.keys[_v.i1];
                _v.forall_1 = true;
                if (!_v.forall_1) break;
            }
            if (!(_v.forall_1)) {
                emit __ScribbleUtilsLib__45.AssertionFailed("002023:0066:000 1: ");
                assert(false);
            }
        }
    }
}

library uint256_to_mapping_uint256_to_uint256_45 {
    struct S {
        mapping(uint256 => mapping(uint256 => uint256)) innerM;
        uint256[] keys;
        mapping(uint256 => uint256) keyIdxM;
    }

    function addKey(S storage m, uint256 key) private {
        uint idx = m.keyIdxM[key];
        if (idx == 0) {
            if (m.keys.length == 0) {
                m.keys.push();
            }
            m.keyIdxM[key] = m.keys.length;
            m.keys.push(key);
        }
    }

    function removeKey(S storage m, uint256 key) private {
        uint256 idx = m.keyIdxM[key];
        if (idx == 0) return;
        if (idx != (m.keys.length - 1)) {
            uint256 lastKey = m.keys[m.keys.length - 1];
            m.keys[idx] = lastKey;
            m.keyIdxM[lastKey] = idx;
        }
        m.keys.pop();
        delete m.keyIdxM[key];
    }

    function get_lhs(S storage m, uint256 key) internal returns (mapping(uint256 => uint256) storage) {
        addKey(m, key);
        return m.innerM[key];
    }

    function get(S storage m, uint256 key) internal view returns (mapping(uint256 => uint256) storage) {
        return m.innerM[key];
    }
}

library Foo_CustomValueType_3_to_uint256_45 {
    struct S {
        mapping(Foo.CustomValueType => uint256) innerM;
        Foo.CustomValueType[] keys;
        mapping(Foo.CustomValueType => uint256) keyIdxM;
        uint256 sum;
    }

    function addKey(S storage m, Foo.CustomValueType key) private {
        uint idx = m.keyIdxM[key];
        if (idx == 0) {
            if (m.keys.length == 0) {
                m.keys.push();
            }
            m.keyIdxM[key] = m.keys.length;
            m.keys.push(key);
        }
    }

    function removeKey(S storage m, Foo.CustomValueType key) private {
        uint256 idx = m.keyIdxM[key];
        if (idx == 0) return;
        if (idx != (m.keys.length - 1)) {
            Foo.CustomValueType lastKey = m.keys[m.keys.length - 1];
            m.keys[idx] = lastKey;
            m.keyIdxM[lastKey] = idx;
        }
        m.keys.pop();
        delete m.keyIdxM[key];
    }

    function set(S storage m, Foo.CustomValueType key, uint256 val) internal returns (uint256) {
        unchecked {
            m.sum -= m.innerM[key];
            m.sum += val;
        }
        m.innerM[key] = val;
        addKey(m, key);
        return m.innerM[key];
    }
}

library __ScribbleUtilsLib__45 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
