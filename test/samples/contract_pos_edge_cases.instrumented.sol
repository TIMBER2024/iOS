/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.6.10;

/// #invariant {:msg ""} x>0;
contract PosConstructorFail {
    struct vars1 {
        bool __scribble_check_invs_at_end;
    }

    int internal x = 0;

    function inc() public {
        vars1 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__108.isInContract();
        __ScribbleUtilsLib__108.setInContract(true);
        _original_PosConstructorFail_inc();
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_PosConstructorFail_inc() internal {
        x++;
    }

    /// Check only the current contract's state invariants
    function __scribble_PosConstructorFail_check_state_invariants_internal() internal {
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__108.AssertionFailed("000966:0067:000 0: ");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_PosConstructorFail_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__108.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(false);
    }
}

/// #invariant {:msg ""} x>0;
contract PosExtCallFail {
    struct vars3 {
        bool __scribble_check_invs_at_end;
    }

    struct vars4 {
        bool __scribble_check_invs_at_end;
    }

    int internal x = 1;

    function inc() public {
        vars3 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__108.isInContract();
        __ScribbleUtilsLib__108.setInContract(true);
        _original_PosExtCallFail_inc();
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_PosExtCallFail_inc() internal {
        x++;
    }

    function fail_int() internal {
        x = 0;
        _callsite_34(this);
    }

    function fail() public {
        vars4 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__108.isInContract();
        __ScribbleUtilsLib__108.setInContract(true);
        _original_PosExtCallFail_fail();
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_PosExtCallFail_fail() internal {
        fail_int();
    }

    /// Check only the current contract's state invariants
    function __scribble_PosExtCallFail_check_state_invariants_internal() internal {
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__108.AssertionFailed("002933:0067:000 1: ");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_PosExtCallFail_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__108.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(false);
    }

    function _callsite_34(PosExtCallFail receiver) private {
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(false);
        receiver.inc();
        __ScribbleUtilsLib__108.setInContract(true);
    }
}

interface IPosLibInterface {
    function boo() external;
}

library SillyMath {
    function add(int a, int b) public returns (int) {
        return a + b;
    }
}

library __ScribbleUtilsLib__108 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

/// #invariant {:msg ""} x>0;
contract PosLibInterface is IPosLibInterface {
    using SillyMath for int;

    struct vars7 {
        bool __scribble_check_invs_at_end;
    }

    struct vars8 {
        bool __scribble_check_invs_at_end;
    }

    int internal x = 1;

    function boo() override external {
        __ScribbleUtilsLib__108.setInContract(true);
        _original_PosLibInterface_boo();
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(false);
    }

    function _original_PosLibInterface_boo() internal {}

    function inc() public {
        vars7 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__108.isInContract();
        __ScribbleUtilsLib__108.setInContract(true);
        _original_PosLibInterface_inc();
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_PosLibInterface_inc() internal {
        x++;
    }

    function add(int v) internal {
        x = x.add(v);
    }

    function fail() public {
        vars8 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__108.isInContract();
        __ScribbleUtilsLib__108.setInContract(true);
        _original_PosLibInterface_fail();
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_PosLibInterface_fail() internal {
        add(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
    }

    /// Check only the current contract's state invariants
    function __scribble_PosLibInterface_check_state_invariants_internal() internal {
        if (!(x > 0)) {
            emit __ScribbleUtilsLib__108.AssertionFailed("006438:0067:000 2: ");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_PosLibInterface_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__108.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__108.setInContract(false);
    }
}
