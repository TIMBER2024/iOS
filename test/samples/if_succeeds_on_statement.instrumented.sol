/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.11;

contract IfSucceedsOnStatement {
    struct vars0 {
        uint256 old_0;
    }

    struct vars1 {
        uint256 old_1;
    }

    function foo(uint amount) public {
        vars0 memory _v;
        uint[] memory a;
        for (uint i = 0; i < a.length; i++) {
            unchecked {
                _v.old_0 = a[i];
            }
            a[i] += amount;
            unchecked {
                if (!((_v.old_0 + amount) == a[i])) {
                    emit __ScribbleUtilsLib__65.AssertionFailed("000610:0066:000 0: ");
                    assert(false);
                }
            }
        }
    }

    function boo(uint amount) public {
        vars1 memory _v;
        uint[] memory a;
        for (uint i = 0; i < a.length; i++) {
            unchecked {
                _v.old_1 = a[i];
            }
            {
                a[i] += amount;
            }
            unchecked {
                if (!((_v.old_1 + amount) == a[i])) {
                    emit __ScribbleUtilsLib__65.AssertionFailed("001126:0066:000 1: ");
                    assert(false);
                }
            }
        }
    }
}

library __ScribbleUtilsLib__65 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
