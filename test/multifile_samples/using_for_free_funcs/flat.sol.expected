/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.13;

type Y is address;

type X is uint256;

type Y_1 is bool;

using { add_1 } for X global;

function zerroAddr() returns (Y) {
    return Y.wrap(address(0x0));
}

function add(X a, X b) pure returns (uint256) {
    return 1;
}

function not(Y_1 x) returns (Y_1) {
    return Y_1.wrap(!Y_1.unwrap(x));
}

function add_1(X a, X b) pure returns (X) {
    return X.wrap(X.unwrap(a) + X.unwrap(b));
}

contract Test {
    function main() public returns (X RET_0) {
        RET_0 = _original_Test_main();
        unchecked {
            if (!(true)) {
                emit __ScribbleUtilsLib__65.AssertionFailed("000707:0066:000 0: ");
                assert(false);
            }
        }
    }

    function _original_Test_main() internal returns (X) {
        X a = X.wrap(1);
        X b = X.wrap(2);
        return a.add_1(b);
    }
}

library __ScribbleUtilsLib__65 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}