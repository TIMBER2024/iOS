pragma solidity 0.6.11;

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    bool __scribble_out_of_contract = true;
}

/// #invariant {:msg "P0"} x > 0;
contract Base is __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    uint internal x = 1;

    /// Check only the current contract's state invariants
    function __scribble_Base_check_state_invariants_internal() internal {
        if (!(x > 0)) {
            emit AssertionFailed("0: P0");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_Base_check_state_invariants_internal();
    }

    constructor() public {
        __scribble_out_of_contract = false;
        __scribble_check_state_invariants();
        __scribble_out_of_contract = true;
    }
}

contract Child1 is __scribble_ReentrancyUtils, Base {
    struct vars2 {
        uint256 old_0;
        bool __scribble_check_invs_at_end;
    }

    function add(uint y) public {
        vars2 memory _v;
        _v.__scribble_check_invs_at_end = __scribble_out_of_contract;
        __scribble_out_of_contract = false;
        _v.old_0 = x;
        _original_Child1_add(y);
        if (!(x == (_v.old_0 + y))) {
            emit AssertionFailed("1: P1");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __scribble_out_of_contract = _v.__scribble_check_invs_at_end;
    }

    function _original_Child1_add(uint y) private {
        x += y;
    }

    /// Check only the current contract's state invariants
    function __scribble_Child1_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Child1_check_state_invariants_internal();
        __scribble_Base_check_state_invariants_internal();
    }

    constructor() public {
        __scribble_out_of_contract = false;
        __scribble_check_state_invariants();
        __scribble_out_of_contract = true;
    }
}

contract Child2 is __scribble_ReentrancyUtils, Base {
    struct vars4 {
        uint256 old_1;
        bool __scribble_check_invs_at_end;
    }

    function double() public {
        vars4 memory _v;
        _v.__scribble_check_invs_at_end = __scribble_out_of_contract;
        __scribble_out_of_contract = false;
        _v.old_1 = x;
        _original_Child2_double();
        if (!(x == (2 * _v.old_1))) {
            emit AssertionFailed("2: P2");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __scribble_out_of_contract = _v.__scribble_check_invs_at_end;
    }

    function _original_Child2_double() private {
        x *= 2;
    }

    /// Check only the current contract's state invariants
    function __scribble_Child2_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Child2_check_state_invariants_internal();
        __scribble_Base_check_state_invariants_internal();
    }

    constructor() public {
        __scribble_out_of_contract = false;
        __scribble_check_state_invariants();
        __scribble_out_of_contract = true;
    }
}
