/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.6.11;

import { Base } from "./base.sol";

contract Child2 is Base {
    struct vars4 {
        uint256 old_1;
        bool __scribble_check_invs_at_end;
    }

    function double() public {
        vars4 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__41.isInContract();
        __ScribbleUtilsLib__41.setInContract(true);
        _v.old_1 = x;
        _original_Child2_double();
        if (!(x == (2 * _v.old_1))) {
            emit __ScribbleUtilsLib__41.AssertionFailed("000598:0068:002 2: P2");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__41.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_Child2_double() internal {
        x *= 2;
    }

    /// Check only the current contract's state invariants
    function __scribble_Child2_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Child2_check_state_invariants_internal();
        __scribble_Base_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__41.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__41.setInContract(false);
    }
}

library __ScribbleUtilsLib__41 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}