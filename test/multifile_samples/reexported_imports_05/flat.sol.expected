pragma solidity 0.5.0;

contract Foo {
    uint internal x;

    function foo() public pure returns (uint) {
        return 1;
    }
}
/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    bool __scribble_out_of_contract = true;
}

contract Moo {
    uint internal y;
}
contract Goo is Foo {
    Foo internal s3;
    Foo internal s4;
    Foo internal s5;

    function baz() public pure returns (uint) {
        return Foo.foo();
    }

    function main() public {
        Foo x = new Foo();
        Foo y = new Foo();
        Foo z = new Foo();
        Moo w = new Moo();
        function() internal pure returns (uint) f = Foo.foo;
        uint t = Foo.x;
        uint t1 = Foo.x;
    }
}
