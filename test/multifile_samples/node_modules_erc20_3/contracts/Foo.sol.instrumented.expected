/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

/// #invariant true;
abstract contract Foo is ERC20 {
    /// Check only the current contract's state invariants
    function __scribble_Foo_check_state_invariants_internal() internal {
        unchecked {
            if (!(true)) {
                emit __ScribbleUtilsLib__685.AssertionFailed("000428:0067:002 0: ");
                assert(false);
            }
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Foo_check_state_invariants_internal();
        __scribble_ERC20_check_state_invariants_internal();
        __scribble_Context_check_state_invariants_internal();
    }

    constructor() {
        __ScribbleUtilsLib__685.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__685.setInContract(false);
    }
}

library __ScribbleUtilsLib__685 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}