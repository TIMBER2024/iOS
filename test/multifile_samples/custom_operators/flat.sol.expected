/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.19;

type Custom is uint256;

using { plus as +, diff as -, eq as == } for Custom global;

function plus(Custom a, Custom b) pure returns (Custom) {
    return Custom.wrap(Custom.unwrap(a) + Custom.unwrap(b));
}

function diff(Custom a, Custom b) pure returns (Custom) {
    return Custom.wrap(Custom.unwrap(a) - Custom.unwrap(b));
}

function eq(Custom a, Custom b) pure returns (bool) {
    return Custom.unwrap(a) == Custom.unwrap(b);
}

contract Test {
    Custom internal a;
    Custom internal b;

    function main() public {
        _original_Test_main();
        unchecked {
            if (!(true)) {
                emit __ScribbleUtilsLib__127.AssertionFailed("000769:0067:000 0: ");
                assert(false);
            }
        }
    }

    function _original_Test_main() internal {
        Custom a = Custom.wrap(1);
        Custom b = Custom.wrap(2);
        a + b;
        a - b;
        a == b;
    }
}

library __ScribbleUtilsLib__127 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}