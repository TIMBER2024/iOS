/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.7;

import { X as XA } from "./A.sol";
import "./A.sol" as A;
import "./B.sol" as B;
import { X as XB } from "./B.sol";

contract Child is B.Base {
    struct vars3 {
        bool __scribble_check_invs_at_end;
    }

    function main1(uint t) public {
        vars3 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__100.isInContract();
        __ScribbleUtilsLib__100.setInContract(true);
        _original_Child_main1(t);
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__100.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_Child_main1(uint t) internal {
        unchecked {
            if (!(((((XA == 2) && (XB == 2)) && (A.X == 2)) && (B.X == 2)) && (t == B.X))) {
                emit __ScribbleUtilsLib__100.AssertionFailed("000943:0067:001 5: ");
                assert(false);
            }
        }
        t++;
        A.Point memory p;
        p.x = 1;
        p.y = 2;
        unchecked {
            if (!(B.foo(p) == 3)) {
                emit __ScribbleUtilsLib__100.AssertionFailed("001212:0067:001 6: ");
                assert(false);
            }
        }
        t++;
    }

    /// Check only the current contract's state invariants
    function __scribble_Child_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Child_check_state_invariants_internal();
        __scribble_Base_check_state_invariants_internal();
    }

    constructor() {
        __ScribbleUtilsLib__100.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__100.setInContract(false);
    }
}

library __ScribbleUtilsLib__100 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}