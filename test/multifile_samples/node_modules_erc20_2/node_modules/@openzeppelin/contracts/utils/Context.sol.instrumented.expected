/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
/// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

///  @dev Provides information about the current execution context, including the
///  sender of the transaction and its data. While these are generally available
///  via msg.sender and msg.data, they should not be accessed in such a direct
///  manner, since when dealing with meta-transactions the account sending and
///  paying for execution may not be the actual sender (as far as an application
///  is concerned).
///  This contract is only required for intermediate, library-like contracts.
abstract contract Context {
    function _msgSender() virtual internal view returns (address) {
        return msg.sender;
    }

    function _msgData() virtual internal view returns (bytes calldata) {
        return msg.data;
    }

    /// Check only the current contract's state invariants
    function __scribble_Context_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_Context_check_state_invariants_internal();
    }

    constructor() {
        __ScribbleUtilsLib__679.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__679.setInContract(false);
    }
}

library __ScribbleUtilsLib__679 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}