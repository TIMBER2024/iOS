/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
import "./base.sol";

/// #macro macro2();
contract Foo {
    function foo(uint z, uint w) public {
        _original_Foo_foo(z, w);
        unchecked {
            if (!((z + w) > 0)) {
                emit __ScribbleUtilsLib__69.AssertionFailed("000325:0071:001 3: dummy");
                assert(false);
            }
        }
    }

    function _original_Foo_foo(uint z, uint w) internal {}
}

library __ScribbleUtilsLib__69 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}