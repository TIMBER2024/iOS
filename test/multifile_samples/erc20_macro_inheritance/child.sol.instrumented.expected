/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
import "./erc20_base.sol";

///  #macro erc20(balances, allowances, _totalSupply);
contract Token is ERC20 {
    struct vars1 {
        uint256 old_0;
        bool __scribble_check_invs_at_end;
    }

    struct vars2 {
        bool __scribble_check_invs_at_end;
    }

    constructor() public ERC20(100000) {
        vars1 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__30.isInContract();
        __ScribbleUtilsLib__30.setInContract(true);
        _v.old_0 = balances.sum;
        __ScribbleUtilsLib__30.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__30.setInContract(false);
        if (!((balances.sum == _v.old_0) || (msg.sig == bytes4(0x00)))) {
            emit __ScribbleUtilsLib__30.AssertionFailed("000861:0095:000 2: The token has a fixed supply.");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__30.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function allowance(address owner, address delegate) override public returns (uint RET_0) {
        vars2 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__30.isInContract();
        __ScribbleUtilsLib__30.setInContract(true);
        RET_0 = _original_Token_allowance(owner, delegate);
        if (!(RET_0 == allowances[owner][delegate])) {
            emit __ScribbleUtilsLib__30.AssertionFailed("001545:0107:000 5: Returns spenders allowance for this owner");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__30.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_Token_allowance(address owner, address delegate) internal returns (uint) {
        return ERC20.allowance(owner, delegate);
    }

    /// Check only the current contract's state invariants
    function __scribble_Token_check_state_invariants_internal() internal {
        if (!(balances.sum == _totalSupply)) {
            emit __ScribbleUtilsLib__30.AssertionFailed("002207:0121:000 1: The sum of balances is always equal to the total supply");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Token_check_state_invariants_internal();
        __scribble_ERC20_check_state_invariants_internal();
    }
}

library __ScribbleUtilsLib__30 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}