/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.6.11;

contract A {
    struct vars1 {
        bool __scribble_check_invs_at_end;
    }

    function foo(uint x) virtual public returns (uint RET_0) {
        vars1 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__15.isInContract();
        __ScribbleUtilsLib__15.setInContract(true);
        RET_0 = _original_A_foo(x);
        if (!(RET_0 >= x)) {
            emit __ScribbleUtilsLib__15.AssertionFailed("000528:0066:000 0: ");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__15.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_A_foo(uint x) internal returns (uint) {
        return x + 1;
    }

    /// Check only the current contract's state invariants
    function __scribble_A_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_A_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__15.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__15.setInContract(false);
    }
}

library __ScribbleUtilsLib__15 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

contract B {
    /// Check only the current contract's state invariants
    function __scribble_B_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_B_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__17.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__17.setInContract(false);
    }
}

library __ScribbleUtilsLib__17 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

library __ScribbleUtilsLib__40 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

library __ScribbleUtilsLib__48 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

/// #invariant {:msg "P1"} true;
contract C is B, A {
    struct vars4 {
        bool __scribble_check_invs_at_end;
    }

    function foo(uint x) virtual override public returns (uint RET_0) {
        vars4 memory _v;
        _v.__scribble_check_invs_at_end = !__ScribbleUtilsLib__40.isInContract();
        __ScribbleUtilsLib__40.setInContract(true);
        RET_0 = _original_C_foo(x);
        if (!(RET_0 >= x)) {
            emit __ScribbleUtilsLib__40.AssertionFailed("005342:0066:000 0: ");
            assert(false);
        }
        if (!(RET_0 >= (x + 2))) {
            emit __ScribbleUtilsLib__40.AssertionFailed("005494:0066:000 2: ");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __ScribbleUtilsLib__40.setInContract(!_v.__scribble_check_invs_at_end);
    }

    function _original_C_foo(uint x) internal returns (uint) {
        return x + 2;
    }

    /// Check only the current contract's state invariants
    function __scribble_C_check_state_invariants_internal() internal {
        if (!(true)) {
            emit __ScribbleUtilsLib__40.AssertionFailed("006025:0068:000 1: P1");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override(B, A) internal {
        __scribble_C_check_state_invariants_internal();
        __scribble_A_check_state_invariants_internal();
        __scribble_B_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__40.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__40.setInContract(false);
    }
}

contract D is B, A {
    /// Check only the current contract's state invariants
    function __scribble_D_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override(B, A) internal {
        __scribble_D_check_state_invariants_internal();
        __scribble_A_check_state_invariants_internal();
        __scribble_B_check_state_invariants_internal();
    }

    constructor() public {
        __ScribbleUtilsLib__48.setInContract(true);
        __scribble_check_state_invariants();
        __ScribbleUtilsLib__48.setInContract(false);
    }
}